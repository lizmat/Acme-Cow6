#!/usr/bin/env perl6

use Acme::Cow;

my $VERSION  = "4.0";
my $progname = $*PROGRAM-NAME;
my $cowpath  = %*ENV<COWPATH> || ".";

# preprocess arguments to handle -?
$_ = "-q" if $_ eq "-?" for  @*ARGS;

## One of these days, we'll get it ported to Windows.  Yeah, right.
my $pathsep = $*DISTRO.path-sep;

unit sub MAIN(
  *@text,
  Bool :b($borg),
  Bool :d($dead),
  Bool :h($help),
  Bool :g($greedy),
  Bool :l($list),
  Bool :n($nofill),
  Bool :p($paranoid),
  Bool :q($questionmark),
  Bool :s($stoned),
  Bool :t($tired),
  Bool :v($verbose),
  Bool :w($wired),
  Bool :y($young),

  Str :f($file),
  Str :e($eyes)   is copy = 'oo',
  Str :T($tongue) is copy = '  ',
  Int :W($wrap)           = 40,
);

if $help || $verbose || $questionmark {
    say $*USAGE;
    exit;
}
elsif $list {
    list_cowfiles();
}

$eyes   .= substr(0, 2);
$tongue .= substr(0, 2);

@text = $*IN.lines(:!chomp) unless @text;
my $cow = $file ?? variant_cow($file) !! Acme::Cow.new;
construct_face($cow);

$progname.ends-with("think") ?? $cow.think(@text) !! $cow.say(@text);
$cow.fill(False) if $nofill;
$cow.wrap($wrap) if $wrap;
$cow.print;

sub list_cowfiles {
    my $basedir;
    for $cowpath.split($pathsep) -> $dir {
        say "Cow files in $dir:";
        .Str.say if .ends-with('.cow') for dir($dir);
    }
# alas, not enough introspection yet
#    say "Cow files installed as modules:";
#    for my $d (@INC) {
#        my @files = glob("$d/Acme/Cow/*.pm");
#        for my $file (@files) {
#            next if (basename($file) eq "TextBalloon.pm");
#            print basename($file, ".pm"), "\n";
#        }
#    }
    exit;
}

sub construct_face($cow) {
    if $borg     { $eyes = "=="; }
    if $dead     { $eyes = "xx"; $tongue = "U "; }
    if $greedy   { $eyes = "\$\$"; }
    if $paranoid { $eyes = "@@"; }
    if $stoned   { $eyes = "**"; $tongue = "U "; }
    if $tired    { $eyes = "--"; } 
    if $wired    { $eyes = "OO"; } 
    if $young    { $eyes = ".."; }

    $cow.el = $eyes.substr(0, 1);
    $cow.er = $eyes.substr(1, 1);
    $cow.U  = $tongue;
}

sub variant_cow($name) {
    if $name ~~ /^ \w <[\d\w]>+ $/ {
        my $module = "Acme::Cow::$name";
        try require ::($module);
        return ::($module).new unless ::($module) ~~ Failure;
    }

    if $name.contains("/") {
        return Acme::Cow.new(File => $name) if $name.IO.e;
    }
    else {
        my $file = $name.ends-with('.cow') ?? $name !! "$name.cow";
        for $cowpath.split($pathsep)>>.IO>>.child($file) -> $path {
            return Acme::Cow.new(File => ~$path) if $path.e;
        }
    }
    die "$progname: Could not find $name cow variant!";
}

=begin pod

=head1 NAME

cow{say,think} - A configurable talking (or thinking) cow

=head1 SYNOPSIS

Usage: $progname [B<-bdgpstwy>] [B<-hv?>] [B<-e> eyes] [B<-f> I<cowfile>] 
          [B<-l>] [B<-n>] [B<-T> I<tongue>] [B<-W> I<wrapcolumn>] [I<message>]

=head1 DESCRIPTION

generates an ASCII picture of a cow saying something provided by
the user.  If run with no arguments, it accepts standard input,
word-wraps the message given at about 40 columns, and prints the
cow saying the given message on standard output.

To aid in the use of arbitrary messages with arbitrary whitespace,
B<-n> option.  If it is specified, the given message will not be
word-wrapped.  This is possibly useful if you want to make the cow
think or speak in B<figlet(6)>.  If B<-n> is specified, there must
not be any command-line arguments left after all the switches have
been processed.

The B<-W> specifies roughly (where the message should be wrapped.
The default is equivalent to invoking with B<-W 40>, i.e. wrap
words at or before the 40th column.

If any command-line arguments are left over after all switches have
been processed, they become the cow's message.  The program will
not accept standard input for a message in this case.

There are several provided modes which change the appearance of
the cow depending on its particular emotional/physical state.  The
B<-b> option initiates Borg mode; B<-d> causes the cow to appear
dead; B<-g> invokes greedy mode; B<-p> causes a state of paranoia
to come over the cow; B<-s> makes the cow appear thoroughly stoned;
B<-t> yields a tired cow; B<-w> is somewhat the opposite of B<-t>,
and initiates wired mode; B<-y> brings on the cow's youthful
appearance.

The user may specify the B<-e> option to select the appearance of
the cow's eyes, in which case the first two characters of the
argument string I<eyes> will be used.  The default eyes are 'oo'.
The tongue is similarly configurable through B<-T>; it must be two
characters and does not appear by default.  However, it does appear
in the 'dead' and 'stoned' modes.  Any configuration done by B<-e>
and B<-T> will be lost if one of the provided modes is used.

The B<-f> option specifies a particular cow picture file ("cowfile")
to use.  If the cowfile spec contains a slash ("/") then it will
be interpreted as a path relative to the current directory.
Otherwise, cowsay will first search C<@INC> for installed cows
under the C<Acme::Cow::> hierarchy, and then search the path
specified in the C<COWPATH> environment variable.  To list all
cowfiles installed as modules (in C<@INC>) and on the current
C<COWPATH>, invoke cowsay with the B<-l> switch.

If the program is invoked as cowthink (or any word that has "think"
as a substring) then the cow will think its message instead of
saying it.

If you would like to write your own cow files, please consult
L<Acme::Cow> and the cowfiles provided with the distribution (in
the C<cows> subdirectory).

=head1 WARNINGS

Cow files for cowsay 4 are not compatible with earlier versions;
they must be converted.

The author is not responsible if people are offended or institutionalized
because of the use of this software.  (The author is also not
responsible in general, but that's a separate matter.)

=head1 SEE ALSO

perl(1), figlet(6), L<Acme::Cow>

=head1 AUTHOR

Perl 6 version: Elizabeth Mattijsen <liz@wenzperl.nl>

Tony Monroe E<lt>tmonroe plus perl at nog dot netE<gt>.  Has been called
a freak many times for even thinking of such a piece of software,
let alone writing it.

The following have contributed cow files, directly or indirectly: 

Shannon Appel, Jordan K Hubbard, Donald Kubasak, Marshall Kirk
McKusick, Lincoln Myers, David Petrou, Anthony S Polito, Geordan
Rosario, Eric Rowe, Lars Smith, E<lt>pborys at p-soft dot silesia
dot linux dot org dot plE<gt>.

If your name is not on this list, and it should be, then feel free
to mail the author and remind him gently.

=head1 BUGS

tend to hang around cows.  Cows sometimes try to shoo them away
with their tails.

Bugs should be reported to the author as soon as they are found,
so he may correct them, or quickly write them off as user error.
:-)

=head1 HISTORY

Cowsay 1 (1996?) was a very limited cow, which only said things in
a particular format: I<subject> is I<verb>ing I<object>.  Cowsay
2 (1997?) overcame that limitation, and added alternate cow files,
and thought capabilities.  Cowsay 3 (1999) was a rewrite in Perl
5.  Cowsay 4 (2002) leverages Perl's object facilities to make the
author's life easier.

=end pod
